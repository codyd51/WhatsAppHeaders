/*
 * This header is generated by weak_classdump 0.2
 * on Thursday, July 10, 2014 at 2:03:56 AM Mountain Daylight Time
 * Operating System: Version 7.1.1 (Build 11D201)
 * weak_classdump is Freeware by Elias Limneos.
 *
 */


@interface GTMHTTPFetcher : NSObject {
	NSMutableURLRequest* request_; 
	NSURLConnection* connection_; 
	NSMutableData* downloadedData_; 
	NSString* downloadPath_; 
	NSString* temporaryDownloadPath_; 
	NSFileHandle* downloadFileHandle_; 
	unsigned long long downloadedLength_; 
	NSURLCredential* credential_; 
	NSURLCredential* proxyCredential_; 
	NSString* sslCertHash_; 
	NSData* postData_; 
	NSInputStream* postStream_; 
	NSMutableData* loggedStreamData_; 
	NSURLResponse* response_; 
	id delegate_; 
	SEL finishedSel_; 
	SEL sentDataSel_; 
	SEL receivedDataSel_; 
	id completionBlock_; 
	id receivedDataBlock_; 
	id sentDataBlock_; 
	id retryBlock_; 
	BOOL hasConnectionEnded_; 
	BOOL isCancellingChallenge_; 
	BOOL isStopNotificationNeeded_; 
	BOOL shouldFetchInBackground_; 
	unsigned backgroundTaskIdentifer_; 
	id userData_; 
	NSMutableDictionary* properties_; 
	NSArray* runLoopModes_; 
	NSOperationQueue* delegateQueue_; 
	id<GTMHTTPFetchHistoryProtocol> fetchHistory_; 
	int cookieStorageMethod_; 
	id<GTMCookieStorageProtocol> cookieStorage_; 
	id<GTMFetcherAuthorizationProtocol> authorizer_; 
	id<GTMHTTPFetcherServiceProtocol> service_; 
	NSString* serviceHost_; 
	int servicePriority_; 
	NSThread* thread_; 
	BOOL isRetryEnabled_; 
	SEL retrySel_; 
	NSTimer* retryTimer_; 
	unsigned retryCount_; 
	double maxRetryInterval_; 
	double minRetryInterval_; 
	double retryFactor_; 
	double lastRetryInterval_; 
	BOOL hasAttemptedAuthRefresh_; 
	NSString* comment_; 
	NSString* log_; 
	NSString* logRequestBody_; 
	NSString* logResponseBody_; 
	BOOL shouldDeferResponseBodyLogging_; 
}
@property (retain) NSMutableURLRequest* mutableRequest; 
@property (retain) NSURLCredential* credential; 
@property (retain) NSURLCredential* proxyCredential; 
@property (copy) NSString* SSLCertHash; 
@property (retain) NSData* postData; 
@property (retain) NSInputStream* postStream; 
@property (@dynamic) int cookieStorageMethod; 
@property (retain) id<GTMFetcherAuthorizationProtocol> authorizer; 
@property (retain) id<GTMHTTPFetcherServiceProtocol> service; 
@property (copy) NSString* serviceHost; 
@property (assign) int servicePriority; 
@property (retain) NSThread* thread; 
@property (retain) id delegate; 
@property (assign) BOOL shouldFetchInBackground; 
@property (assign) SEL sentDataSelector; 
@property (assign) SEL receivedDataSelector; 
@property (copy) id sentDataBlock; 
@property (copy) id receivedDataBlock; 
@property (getter=isRetryEnabled,@dynamic) BOOL retryEnabled; 
@property (assign) SEL retrySelector; 
@property (copy) id retryBlock; 
@property (@dynamic) double maxRetryInterval; 
@property (@dynamic) double minRetryInterval; 
@property (assign) double retryFactor; 
@property (@dynamic,copy) unsigned retryCount; 
@property (@dynamic,copy) double nextRetryInterval; 
@property (@dynamic,copy) int statusCode; 
@property (@dynamic,copy) NSDictionary* responseHeaders; 
@property (retain) NSURLResponse* response; 
@property (copy) unsigned long long downloadedLength; 
@property (retain) NSData* downloadedData; 
@property (copy) NSString* downloadPath; 
@property (retain) NSFileHandle* downloadFileHandle; 
@property (@dynamic,retain) id<GTMHTTPFetchHistoryProtocol> fetchHistory; 
@property (@dynamic,retain) id userData; 
@property (@dynamic,copy) NSMutableDictionary* properties; 
@property (copy) NSString* comment; 
@property (copy) NSString* log; 
@property (retain) NSOperationQueue* delegateQueue; 
@property (retain) NSArray* runLoopModes; 
@property (copy) NSString* temporaryDownloadPath; 
@property (retain) id<GTMCookieStorageProtocol> cookieStorage; 
@property (copy) id completionBlock; 
+(id)fetcherWithURLString:(id)arg1;
+(id)fetcherWithRequest:(id)arg1;
+(id)fetcherWithURL:(id)arg1;
+(id)staticCookieStorage;
+(BOOL)doesSupportSentDataCallback;
+(void)setConnectionClass:(Class)arg1;
+(void)initialize;
+(Class)connectionClass;
-(BOOL)beginFetchWithDelegate:(id)arg1 didFinishSelector:(SEL)arg2;
-(void)setSSLCertHash:(id)arg1;
-(BOOL)beginFetchWithCompletionHandler:(id)arg1;
-(void)setPostData:(id)arg1;
-(void)stopFetching;
-(void)setReceivedDataSelector:(SEL)arg1;
-(void)setSentDataSelector:(SEL)arg1;
-(void)setCookieStorageMethod:(int)arg1;
-(BOOL)beginFetchMayDelay:(BOOL)arg1 mayAuthorize:(BOOL)arg2;
-(BOOL)authorizeRequest;
-(void)setMaxRetryInterval:(double)arg1;
-(void)addCookiesToRequest:(id)arg1;
-(id)createTempDownloadFilePathForPath:(id)arg1;
-(void)setTemporaryDownloadPath:(id)arg1;
-(void)setDownloadFileHandle:(id)arg1;
-(void)backgroundFetchExpired;
-(void)failToBeginFetchDeferWithError:(id)arg1;
-(void)failToBeginFetchWithError:(id)arg1;
-(void)invokeFetchCallbacksOnDelegateQueueWithData:(id)arg1 error:(id)arg2;
-(void)releaseCallbacks;
-(void)setAuthorizer:(id)arg1;
-(void)stopFetchReleasingCallbacks:(BOOL)arg1;
-(void)authorizer:(id)arg1 request:(id)arg2 finishedWithError:(id)arg3;
-(void)setSentDataBlock:(id)arg1;
-(void)setReceivedDataBlock:(id)arg1;
-(void)setRetryBlock:(id)arg1;
-(void)destroyRetryTimer;
-(void)sendStopNotificationIfNeeded;
-(void)handleCookiesForResponse:(id)arg1;
-(void)logNowWithError:(id)arg1;
-(void)setMutableRequest:(id)arg1;
-(void)invokeFetchCallback:(SEL)arg1 target:(id)arg2 data:(id)arg3 error:(id)arg4;
-(void)invokeFetchCallbacksWithData:(id)arg1 error:(id)arg2;
-(void)invokeOnQueueWithDictionary:(id)arg1;
-(void)invokeSentDataCallback:(SEL)arg1 target:(id)arg2 didSendBodyData:(int)arg3 totalBytesWritten:(int)arg4 totalBytesExpectedToWrite:(int)arg5;
-(id)cachedDataForStatus;
-(int)statusAfterHandlingNotModifiedError;
-(BOOL)shouldRetryNowForStatus:(int)arg1 error:(id)arg2;
-(void)beginRetryTimer;
-(BOOL)shouldReleaseCallbacksUponCompletion;
-(BOOL)isRetryError:(id)arg1;
-(BOOL)invokeRetryCallback:(SEL)arg1 target:(id)arg2 willRetry:(BOOL)arg3 error:(id)arg4;
-(void)primeRetryTimerWithNewTimeInterval:(double)arg1;
-(void)retryTimerFired:(id)arg1;
-(void)retryFetch;
-(void)setMinRetryInterval:(double)arg1;
-(void)setRetryFactor:(double)arg1;
-(void)waitForCompletionWithTimeout:(double)arg1;
-(void)setRetryEnabled:(BOOL)arg1;
-(void)setFetchHistory:(id)arg1;
-(void)addPropertiesFromDictionary:(id)arg1;
-(void)setCommentWithFormat:(id)arg1;
-(void)setProxyCredential:(id)arg1;
-(void)setPostStream:(id)arg1;
-(void)setServiceHost:(id)arg1;
-(void)setServicePriority:(int)arg1;
-(void)setRetrySelector:(SEL)arg1;
-(void)setDownloadPath:(id)arg1;
-(void)setLog:(id)arg1;
-(void)setShouldFetchInBackground:(BOOL)arg1;
-(void)setResponse:(id)arg1;
-(void)setComment:(id)arg1;
-(id)propertyForKey:(id)arg1;
-(void)setProperty:(id)arg1 forKey:(id)arg2;
-(id)connection:(id)arg1 willSendRequest:(id)arg2 redirectResponse:(id)arg3;
-(void)connection:(id)arg1 didSendBodyData:(int)arg2 totalBytesWritten:(int)arg3 totalBytesExpectedToWrite:(int)arg4;
-(void)setDelegateQueue:(id)arg1;
-(void)setRunLoopModes:(id)arg1;
-(void)dealloc;
-(void)setDelegate:(id)arg1;
-(id)init;
-(id)description;
-(id)copyWithZone:(NSZone*)arg1;
-(id)initWithRequest:(id)arg1;
-(void)setCompletionBlock:(id)arg1;
-(void)connection:(id)arg1 didFailWithError:(id)arg2;
-(void)connection:(id)arg1 didReceiveData:(id)arg2;
-(void)connectionDidFinishLoading:(id)arg1;
-(void)connection:(id)arg1 didReceiveResponse:(id)arg2;
-(void)setUserData:(id)arg1;
-(void)setProperties:(id)arg1;
-(void)setCookieStorage:(id)arg1;
-(void)setDownloadedData:(id)arg1;
-(void)setThread:(id)arg1;
-(void)setCredential:(id)arg1;
-(void)setService:(id)arg1;
-(BOOL)isFetching;
-(BOOL)connection:(id)arg1 canAuthenticateAgainstProtectionSpace:(id)arg2;
-(void)connection:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2;
-(void)endBackgroundTask;
@end